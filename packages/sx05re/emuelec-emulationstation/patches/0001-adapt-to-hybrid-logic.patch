From 6923450612d31af58e3be496469ee0f236ca2b11 Mon Sep 17 00:00:00 2001
From: 7Ji <pugokushin@gmail.com>
Date: Sun, 5 Feb 2023 23:23:01 +0800
Subject: [PATCH] adapt to hybrid logic

---
 es-app/CMakeLists.txt                    |   3 -
 es-app/src/ApiSystem.cpp                 |  69 -------
 es-app/src/ApiSystem.h                   |   3 -
 es-app/src/NetworkThread.cpp             |  24 ---
 es-app/src/Win32ApiSystem.cpp            | 114 -----------
 es-app/src/Win32ApiSystem.h              |   4 -
 es-app/src/guis/GuiMenu.cpp              |  71 ++-----
 es-app/src/guis/GuiUpdate.cpp            | 231 -----------------------
 es-app/src/guis/GuiUpdate.h              |  46 -----
 es-app/src/services/HttpServerThread.cpp |   4 +-
 10 files changed, 12 insertions(+), 557 deletions(-)
 delete mode 100644 es-app/src/guis/GuiUpdate.cpp
 delete mode 100644 es-app/src/guis/GuiUpdate.h

diff --git a/es-app/CMakeLists.txt b/es-app/CMakeLists.txt
index 7e9c7d00..82a9b1af 100644
--- a/es-app/CMakeLists.txt
+++ b/es-app/CMakeLists.txt
@@ -51,8 +51,6 @@ set(ES_HEADERS
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiCollectionSystemsOptions.h
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiBackupStart.h # batocera
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiInstallStart.h # batocera
-    ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiUpdate.h # batocera
-    ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiUpdate.cpp # batocera    
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiBackup.h # batocera
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiBackup.cpp # batocera
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiInstall.h # batocera
@@ -157,7 +155,6 @@ set(ES_SOURCES
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiCollectionSystemsOptions.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiBackupStart.cpp # batocera
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiInstallStart.cpp # batocera
-    ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiUpdate.cpp # batocera    
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiBackup.cpp # batocera
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiInstall.cpp # batocera    
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiThemeInstaller.cpp
diff --git a/es-app/src/ApiSystem.cpp b/es-app/src/ApiSystem.cpp
index 57578a03..d8b6fc86 100644
--- a/es-app/src/ApiSystem.cpp
+++ b/es-app/src/ApiSystem.cpp
@@ -236,49 +236,6 @@ bool ApiSystem::setOverclock(std::string mode)
 	return executeScript("batocera-overclock set " + mode);
 }
 
-// BusyComponent* ui
-std::pair<std::string, int> ApiSystem::updateSystem(const std::function<void(const std::string)>& func)
-{
-	LOG(LogDebug) << "ApiSystem::updateSystem";
-
-#ifdef _ENABLEEMUELEC	
-	std::string updatecommand = "emuelec-upgrade";
-#else
-	std::string updatecommand = "batocera-upgrade";
-#endif
-
-	FILE *pipe = popen(updatecommand.c_str(), "r");
-	if (pipe == nullptr)
-		return std::pair<std::string, int>(std::string("Cannot call update command"), -1);
-	
-	char line[1024] = "";
-#ifdef _ENABLEEMUELEC
-    FILE *flog = fopen(Utils::FileSystem::combine(Paths::getLogPath(), "emuelec-upgrade.log").c_str(), "w");
-#else
-	FILE *flog = fopen(Utils::FileSystem::combine(Paths::getLogPath(), "batocera-upgrade.log").c_str(), "w");
-#endif
-	while (fgets(line, 1024, pipe)) 
-	{
-	
-		strtok(line, "\n");
-		if (flog != nullptr) 
-			fprintf(flog, "%s\n", line);
-
-		if (func != nullptr)
-			func(std::string(line));		
-	}
-
-	int exitCode = WEXITSTATUS(pclose(pipe));
-
-	if (flog != NULL)
-	{
-		fprintf(flog, "Exit code : %d\n", exitCode);
-		fclose(flog);
-	}
-
-	return std::pair<std::string, int>(std::string(line), exitCode);
-}
-
 std::pair<std::string, int> ApiSystem::backupSystem(BusyComponent* ui, std::string device) 
 {
 	LOG(LogDebug) << "ApiSystem::backupSystem";
@@ -385,32 +342,6 @@ bool ApiSystem::ping()
 	return true;
 }
 
-bool ApiSystem::canUpdate(std::vector<std::string>& output) 
-{
-	LOG(LogDebug) << "ApiSystem::canUpdate";
-
-	FILE *pipe = popen("batocera-config canupdate", "r");
-	if (pipe == NULL)
-		return false;
-
-	char line[1024];
-	while (fgets(line, 1024, pipe)) 
-	{
-		strtok(line, "\n");
-		output.push_back(std::string(line));
-	}
-
-	int res = WEXITSTATUS(pclose(pipe));
-	if (res == 0) 
-	{
-		LOG(LogInfo) << "Can update ";
-		return true;
-	}
-
-	LOG(LogInfo) << "Cannot update ";
-	return false;
-}
-
 void ApiSystem::launchExternalWindow_before(Window *window) 
 {
 	LOG(LogDebug) << "ApiSystem::launchExternalWindow_before";
diff --git a/es-app/src/ApiSystem.h b/es-app/src/ApiSystem.h
index 85cc700c..fa77a471 100644
--- a/es-app/src/ApiSystem.h
+++ b/es-app/src/ApiSystem.h
@@ -131,14 +131,11 @@ public:
 
     bool setOverclock(std::string mode);
 
-    virtual std::pair<std::string, int> updateSystem(const std::function<void(const std::string)>& func = nullptr);
-
     std::pair<std::string, int> backupSystem(BusyComponent* ui, std::string device);
     std::pair<std::string, int> installSystem(BusyComponent* ui, std::string device, std::string architecture);
     std::pair<std::string, int> scrape(BusyComponent* ui);
 
     virtual bool ping();
-    virtual bool canUpdate(std::vector<std::string>& output);
 	virtual void setReadyFlag(bool ready = true);
 	virtual bool isReadyFlagSet();
 
diff --git a/es-app/src/NetworkThread.cpp b/es-app/src/NetworkThread.cpp
index 86120dba..39287e18 100644
--- a/es-app/src/NetworkThread.cpp
+++ b/es-app/src/NetworkThread.cpp
@@ -79,29 +79,5 @@ void NetworkThread::run()
 		}
 		
 		checkPadsBatteryLevel();
-
-		if (mCheckUpdateTimer >= CHECKUPDATE_MINUTES && SystemConf::getInstance()->getBool("updates.enabled") && ApiSystem::getInstance()->isScriptingSupported(ApiSystem::UPGRADE))
-		{
-			mCheckUpdateTimer = 0;
-
-			LOG(LogDebug) << "NetworkThread : Checking for updates";
-
-			std::vector<std::string> msgtbl;
-			if (ApiSystem::getInstance()->canUpdate(msgtbl))
-			{
-				std::string msg = "";
-				for (int i = 0; i < msgtbl.size(); i++)
-				{
-					if (i != 0) msg += "\n";
-					msg += msgtbl[i];
-				}
-
-				LOG(LogDebug) << "NetworkThread : Update available " << msg.c_str();
-				mWindow->displayNotificationMessage(_U("\uF019  ") + _("UPDATE AVAILABLE") + std::string(": ") + msg);
-				mRunning = false;
-			}
-			else
-				LOG(LogDebug) << "NetworkThread : No update found";
-		}
 	}
 }
\ No newline at end of file
diff --git a/es-app/src/Win32ApiSystem.cpp b/es-app/src/Win32ApiSystem.cpp
index 6309be0a..5d7e27f6 100644
--- a/es-app/src/Win32ApiSystem.cpp
+++ b/es-app/src/Win32ApiSystem.cpp
@@ -879,73 +879,6 @@ void Win32ApiSystem::installEmulationStationZip(const std::string& zipFile)
 	Utils::FileSystem::deleteDirectoryFiles(path);
 }
 
-std::pair<std::string, int> Win32ApiSystem::updateSystem(const std::function<void(const std::string)>& func)
-{
-	std::string esUpdateScript = getScriptPath("es-update");
-	if (!esUpdateScript.empty())
-	{
-		std::string esUpdateDirectory = Utils::FileSystem::getPreferredPath(Utils::FileSystem::getParent(esUpdateScript));
-
-		std::string updatesType = Settings::getInstance()->getString("updates.type");
-		if (updatesType == "beta" || updatesType == "unstable")
-			esUpdateScript += " -branch " + updatesType;
-
-		std::string output;
-		auto ret = executeCMD(esUpdateScript.c_str(), output, esUpdateDirectory.c_str(), func);
-		if (ret != 0)
-		{
-			auto lines = Utils::String::split(Utils::String::replace(output, "\r", ""), '\n', true);
-			if (lines.size() > 0)
-				return std::pair<std::string, int>(lines[lines.size() - 1], ret);
-
-			return std::pair<std::string, int>("error", ret);
-		}
-		else
-		{
-			auto lines = Utils::String::split(Utils::String::replace(output, "\r", ""), '\n', true);
-			if (lines.size() > 0)
-			{			
-				std::string lastLine = Utils::String::trim(Utils::String::replace(lines[lines.size() - 1], "\f", ""));
-				if (!lastLine.find(".zip") != std::string::npos && Utils::FileSystem::exists(lastLine))
-				{
-					if (func != nullptr)
-						func(std::string("Updating EmulationStation"));
-
-					installEmulationStationZip(lastLine);
-					return std::pair<std::string, int>("done.", ret);
-				}
-			}
-
-			return std::pair<std::string, int>("done.", ret);
-		}
-	}
-
-	std::string url = getUrlFromUpdateType(UPDATEURL);
-
-	std::string fileName = Utils::FileSystem::getFileName(url);
-	std::string path = Paths::getUserEmulationStationPath() + "/update";
-
-	if (Utils::FileSystem::exists(path))
-		Utils::FileSystem::deleteDirectoryFiles(path);
-	else
-		Utils::FileSystem::createDirectory(path);
-
-	std::string zipFile = path + "/" + fileName;
-
-	if (downloadFile(url, zipFile, "update", func))
-	{
-		if (func != nullptr)
-			func(std::string("Extracting update"));
-
-		installEmulationStationZip(zipFile);
-		updateEmulatorLauncher(func);
-
-		return std::pair<std::string, int>("done.", 0);
-	}
-
-	return std::pair<std::string, int>("error.", 1);
-}
-
 void Win32ApiSystem::updateEmulatorLauncher(const std::function<void(const std::string)>& func)
 {
 	std::string updatesType = Settings::getInstance()->getString("updates.type");
@@ -1012,53 +945,6 @@ void Win32ApiSystem::updateEmulatorLauncher(const std::function<void(const std::
 	}
 }
 
-bool Win32ApiSystem::canUpdate(std::vector<std::string>& output)
-{
-	// Update using 'es-checkversion.cmd' scripts ?
-	std::string esUpdateScript = getScriptPath("es-checkversion");
-	if (!esUpdateScript.empty())
-	{
-		std::string esUpdateDirectory = Utils::FileSystem::getPreferredPath(Utils::FileSystem::getParent(esUpdateScript));
-
-		std::string updatesType = Settings::getInstance()->getString("updates.type");
-		if (updatesType == "beta" || updatesType == "unstable")
-			esUpdateScript += " -branch " + updatesType;
-
-		std::string cmdOutput; 
-		auto ret = executeCMD(esUpdateScript.c_str(), cmdOutput, esUpdateDirectory.c_str());
-		if (ret == 0 && !cmdOutput.empty())
-		{
-			auto lines = Utils::String::split(Utils::String::replace(cmdOutput, "\r", ""), '\n', true);
-			if (lines.size() > 0)
-				output.push_back(lines[lines.size() - 1]);
-		}
-
-		return (ret == 0);
-	}
-
-	std::string localVersion;
-	std::string localVersionFile = Paths::getEmulationStationPath() + "/version.info";
-	if (Utils::FileSystem::exists(localVersionFile))
-	{
-		localVersion = Utils::FileSystem::readAllText(localVersionFile);
-		localVersion = Utils::String::replace(Utils::String::replace(localVersion, "\r", ""), "\n", "");
-	}
-
-	HttpReq httpreq(getUrlFromUpdateType(VERSIONURL));
-	if (httpreq.wait())
-	{
-		std::string serverVersion = httpreq.getContent();
-		serverVersion = Utils::String::replace(Utils::String::replace(serverVersion, "\r", ""), "\n", "");
-		if (!serverVersion.empty() && serverVersion != localVersion)
-		{
-			output.push_back(serverVersion);
-			return true;
-		}
-	}
-
-	return false;
-}
-
 bool Win32ApiSystem::launchKodi(Window *window)
 {
 	std::string args;
diff --git a/es-app/src/Win32ApiSystem.h b/es-app/src/Win32ApiSystem.h
index f0d8e5b3..80bef6cf 100644
--- a/es-app/src/Win32ApiSystem.h
+++ b/es-app/src/Win32ApiSystem.h
@@ -34,10 +34,6 @@ public:
 	virtual std::pair<std::string, int> installBatoceraBezel(std::string bezelsystem, const std::function<void(const std::string)>& func = nullptr);
 	virtual std::pair<std::string, int> uninstallBatoceraBezel(std::string bezelsystem, const std::function<void(const std::string)>& func = nullptr);
 
-	// Updates
-	std::pair<std::string, int> updateSystem(const std::function<void(const std::string)>& func) override;
-	bool canUpdate(std::vector<std::string>& output) override;
-
 	bool ping() override;
 
 	bool launchKodi(Window *window) override;	
diff --git a/es-app/src/guis/GuiMenu.cpp b/es-app/src/guis/GuiMenu.cpp
index 10bc33cf..215521cf 100644
--- a/es-app/src/guis/GuiMenu.cpp
+++ b/es-app/src/guis/GuiMenu.cpp
@@ -36,7 +36,6 @@
 #include "InputManager.h"
 #include "AudioManager.h"
 #include <LibretroRatio.h>
-#include "guis/GuiUpdate.h"
 #include "guis/GuiInstallStart.h"
 #include "guis/GuiTextEditPopupKeyboard.h"
 #include "guis/GuiBackupStart.h"
@@ -785,19 +784,6 @@ void GuiMenu::openDangerZone(Window* mWindow, std::string configName)
 				runSystemCommand("systemd-run /usr/bin/emuelec-utils clearconfig ALL", "", nullptr);
 				}, _("NO"), nullptr));
      });
-    dangerZone->addEntry(_("FORCE UPDATE"), true, [mWindow] { 
-                 
-    				if (ApiSystem::getInstance()->getIpAdress() == "NOT CONNECTED")
-					{
-						mWindow->pushGui(new GuiMsgBox(mWindow, _("YOU ARE NOT CONNECTED TO A NETWORK"), _("OK"), nullptr));
-						return;
-					}
-        
-    mWindow->pushGui(new GuiMsgBox(mWindow, _("WARNING: A FORCE UPDATE WILL DOWNLOAD WHATEVER VERSION IS AVAILABLE FOR UPDATE REGARDLESS OF VERSION BASED ON THE TYPE YOU HAVE SELECTED IN THE UPDATE & DOWNLOADS (beta or stable)\n\nSYSTEM WILL RESET SCRIPTS AND BINARIES !\nDOWNLOADS, THEMES, BLUETOOTH PAIRINGS AND ROMS FOLDER WILL NOT BE AFFECTED.\n\nCONTINUE WITH FORCE UPDATE?"), _("YES"),
-				[] { 
-				runSystemCommand("systemd-run /usr/bin/updatecheck.sh forceupdate", "", nullptr);
-				}, _("NO"), nullptr));
-     });
 
 mWindow->pushGui(dangerZone);
 }
@@ -1444,52 +1430,6 @@ void GuiMenu::openUpdatesSettings()
 		});
 	}
 
-	if (ApiSystem::getInstance()->isScriptingSupported(ApiSystem::UPGRADE))
-	{
-		updateGui->addGroup(_("SOFTWARE UPDATES"));
-
-		// Enable updates
-		updateGui->addSwitch(_("CHECK FOR UPDATES"), "updates.enabled", false);
-
-		auto updatesTypeList = std::make_shared<OptionListComponent<std::string> >(mWindow, _("UPDATE TYPE"), false);
-
-		std::string updatesType = SystemConf::getInstance()->get("updates.type");
-
-#if WIN32
-		if (updatesType == "unstable")
-			updatesTypeList->add("unstable", "unstable", updatesType == "unstable");
-		else
-#endif
-			if (updatesType.empty() || updatesType != "beta")
-				updatesType = "stable";
-
-		updatesTypeList->add("stable", "stable", updatesType == "stable");
-		updatesTypeList->add("beta", "beta", updatesType == "beta");
-
-		updateGui->addWithLabel(_("UPDATE TYPE"), updatesTypeList);
-		updatesTypeList->setSelectedChangedCallback([](std::string name)
-		{
-			if (SystemConf::getInstance()->set("updates.type", name))
-				SystemConf::getInstance()->saveSystemConf();
-		});
-
-		// Start update
-		updateGui->addEntry(GuiUpdate::state == GuiUpdateState::State::UPDATE_READY ? _("APPLY UPDATE") : _("START UPDATE"), true, [this]
-		{
-			if (GuiUpdate::state == GuiUpdateState::State::UPDATE_READY)
-				quitES(QuitMode::RESTART);
-			else if (GuiUpdate::state == GuiUpdateState::State::UPDATER_RUNNING)
-				mWindow->pushGui(new GuiMsgBox(mWindow, _("UPDATER IS ALREADY RUNNING")));
-			else
-			{
-				if (!checkNetwork())
-					return;
-
-				mWindow->pushGui(new GuiUpdate(mWindow));
-			}
-		});
-	}
-
 	mWindow->pushGui(updateGui);
 }
 
@@ -4247,6 +4187,17 @@ void GuiMenu::openQuitMenu_static(Window *window, bool quickAccessMenu, bool ani
 				quitES(QuitMode::QUIT);
 			}, _("NO"), nullptr));
 		}, "iconControllers");
+
+		s->addEntry(_("REBOOT TO HYBRID/CE"), false, [window] {
+			window->pushGui(new GuiMsgBox(window, _("REALLY REBOOT TO HYBRID/CE?"), _("YES"),
+				[] {
+				Scripting::fireEvent("quit", "hybrid_ce");
+				runSystemCommand("hybrid_reboot_ce", "", nullptr);
+				runSystemCommand("sync", "", nullptr);
+				runSystemCommand("systemctl reboot", "", nullptr);
+				quitES(QuitMode::QUIT);
+			}, _("NO"), nullptr));
+		}, "iconAdvanced");
 		
 		s->addEntry(_("REBOOT FROM NAND"), false, [window] {
 			window->pushGui(new GuiMsgBox(window, _("REALLY REBOOT FROM NAND?"), _("YES"),
diff --git a/es-app/src/guis/GuiUpdate.cpp b/es-app/src/guis/GuiUpdate.cpp
deleted file mode 100644
index 7684131e..00000000
--- a/es-app/src/guis/GuiUpdate.cpp
+++ /dev/null
@@ -1,231 +0,0 @@
-#include "guis/GuiUpdate.h"
-#include "guis/GuiMsgBox.h"
-#include "Window.h"
-#include <string>
-#include "Log.h"
-#include "Settings.h"
-#include "ApiSystem.h"
-#include "platform.h"
-#include "LocaleES.h"
-#include "components/AsyncNotificationComponent.h"
-
-GuiUpdateState::State GuiUpdate::state = GuiUpdateState::State::NO_UPDATE;
-
-class ThreadedUpdater
-{
-public:
-	ThreadedUpdater(Window* window) : mWindow(window)
-	{
-		GuiUpdate::state = GuiUpdateState::State::UPDATER_RUNNING;
-
-		mWndNotification = mWindow->createAsyncNotificationComponent();
-#ifdef _ENABLEEMUELEC
-		mWndNotification->updateTitle(_U("\uF019 ") + _("UPDATING EMUELEC"));
-#else
-		auto label = Utils::String::format(_("UPDATING %s").c_str(), ApiSystem::getInstance()->getApplicationName().c_str());
-		mWndNotification->updateTitle(_U("\uF019 ") + label);
-#endif
-		mHandle = new std::thread(&ThreadedUpdater::threadUpdate, this);
-	}
-
-	~ThreadedUpdater()
-	{
-		mWndNotification->close();
-		mWndNotification = nullptr;
-	}
-
-	void threadUpdate()
-	{
-		std::pair<std::string, int> updateStatus = ApiSystem::getInstance()->updateSystem([this](const std::string info)
-		{
-			auto pos = info.find(">>>");
-			if (pos != std::string::npos)
-			{
-				std::string percent(info.substr(pos));		
-				percent = Utils::String::replace(percent, ">", "");
-				percent = Utils::String::replace(percent, "%", "");
-				percent = Utils::String::replace(percent, " ", "");
-
-				int value = atoi(percent.c_str());
-
-				std::string text(info.substr(0, pos));
-				text = Utils::String::trim(text);
-
-				mWndNotification->updatePercent(value);
-				mWndNotification->updateText(text);
-			}
-			else
-			{
-				mWndNotification->updatePercent(-1);
-				mWndNotification->updateText(info);
-			}
-		});
-
-		if (updateStatus.second == 0)
-		{
-			GuiUpdate::state = GuiUpdateState::State::UPDATE_READY;
-
-			mWndNotification->updateTitle(_U("\uF019 ") + _("UPDATE IS READY"));
-			mWndNotification->updateText(_("REBOOT TO APPLY"));
-
-			std::this_thread::yield();
-			std::this_thread::sleep_for(std::chrono::hours(12));
-		}
-		else
-		{
-			GuiUpdate::state = GuiUpdateState::State::NO_UPDATE;
-
-			std::string error = _("AN ERROR OCCURED") + std::string(": ") + updateStatus.first;
-			mWindow->displayNotificationMessage(error);
-		}
-
-		delete this;
-	}
-
-private:
-	std::thread*				mHandle;
-	AsyncNotificationComponent* mWndNotification;
-	Window*						mWindow;
-};
-
-
-GuiUpdate::GuiUpdate(Window* window) : GuiComponent(window), mBusyAnim(window)
-{
-	LOG(LogInfo) << "Starting GuiUpdate";
-
-	setSize((float)Renderer::getScreenWidth(), (float)Renderer::getScreenHeight());
-
-	mState = 0;	
-    mLoading = true;
-    mPingHandle = new std::thread(&GuiUpdate::threadPing, this);
-    mBusyAnim.setSize(mSize);
-}
-
-GuiUpdate::~GuiUpdate()
-{	
-	mPingHandle->join();
-	delete mPingHandle;
-}
-
-void GuiUpdate::threadPing()
-{	
-	if (ApiSystem::getInstance()->ping())
-	{
-		std::vector<std::string> msgtbl;
-		if (ApiSystem::getInstance()->canUpdate(msgtbl))
-		{
-			if (msgtbl.size() == 1)
-				mUpdateVersion = msgtbl[0];
-
-			onUpdateAvailable();
-		}
-		else
-			onNoUpdateAvailable();
-	}
-	else
-		onPingError();
-}
-
-void GuiUpdate::onUpdateAvailable()
-{
-	mLoading = false;
-	LOG(LogInfo) << "GuiUpdate : Update available" << "\n";
-	mState = 1;
-}
-
-void GuiUpdate::onNoUpdateAvailable()
-{
-	mLoading = false;
-	LOG(LogInfo) << "GuiUpdate : No update available" << "\n";
-	mState = 6;
-}
-
-void GuiUpdate::onPingError()
-{
-	LOG(LogError) << "GuiUpdate : Ping failed" << "\n";
-
-	mLoading = false;
-	mState = 3;
-}
-
-void GuiUpdate::update(int deltaTime)
-{
-	GuiComponent::update(deltaTime);
-
-	if (mLoading)
-		mBusyAnim.update(deltaTime);
-
-	Window* window = mWindow;
-
-	switch (mState)
-	{
-		case 1:
-		{
-			mState = 0;
-
-			std::string message = _("REALLY UPDATE?");
-
-			if (!mUpdateVersion.empty())
-				message = Utils::String::format(_("YOU ARE CURRENTLY USING VERSION %s\nDO YOU WANT TO UPDATE TO VERSION %s?").c_str(), ApiSystem::getInstance()->getVersion().c_str(), mUpdateVersion.c_str()),
-
-			window->pushGui(new GuiMsgBox(window, message, _("YES"), [this]
-			{
-				mState = 2;
-				mLoading = true;
-
-				mState = -1;
-				new ThreadedUpdater(mWindow);
-
-			}, _("NO"), [this] { mState = -1; }));
-		}		
-		break;
-
-		case 3:
-		
-			mState = 0;
-			window->pushGui(new GuiMsgBox(window, _("NETWORK CONNECTION NEEDED"), _("OK"), [this] 
-			{
-				mState = -1;
-			}));			
-		
-			break;
-
-		case 6:
-
-			mState = 0;
-			window->pushGui(new GuiMsgBox(window, _("NO UPDATE AVAILABLE"), _("OK"), [this] 
-			{
-				mState = -1;
-			}));
-
-			break;
-
-		case -1:
-			delete this;
-			break;
-	}
-}
-
-void GuiUpdate::render(const Transform4x4f& parentTrans)
-{
-	Transform4x4f trans = parentTrans * getTransform();
-
-	renderChildren(trans);
-
-	Renderer::setMatrix(trans);
-	Renderer::drawRect(0.f, 0.f, mSize.x(), mSize.y(), 0x00000011);
-
-	if (mLoading)
-		mBusyAnim.render(trans);
-}
-
-bool GuiUpdate::input(InputConfig* config, Input input)
-{
-	return false;
-}
-
-std::vector<HelpPrompt> GuiUpdate::getHelpPrompts()
-{
-	return std::vector<HelpPrompt>();
-}
-
diff --git a/es-app/src/guis/GuiUpdate.h b/es-app/src/guis/GuiUpdate.h
deleted file mode 100644
index a4a6be0e..00000000
--- a/es-app/src/guis/GuiUpdate.h
+++ /dev/null
@@ -1,46 +0,0 @@
-#pragma once
-
-#include "GuiComponent.h"
-#include "components/MenuComponent.h"
-#include "components/BusyComponent.h"
-
-#include <thread>
-
-namespace GuiUpdateState
-{
-	enum State
-	{
-		NO_UPDATE,
-		UPDATER_RUNNING,
-		UPDATE_READY
-	};
-}
-
-class GuiUpdate : public GuiComponent 
-{
-public:
-	static GuiUpdateState::State state;
-
-    GuiUpdate(Window *window);
-    virtual ~GuiUpdate();
-
-    void render(const Transform4x4f &parentTrans) override;
-    bool input(InputConfig *config, Input input) override;
-    std::vector<HelpPrompt> getHelpPrompts() override;
-    void update(int deltaTime) override;
-
-private:
-    BusyComponent mBusyAnim;
-    bool mLoading;
-    int mState;
-	std::string mUpdateVersion;
-
-    std::pair<std::string, int> mResult;
-
-	std::thread* mPingHandle;
-
-    void threadPing();
-    void onUpdateAvailable();
-    void onNoUpdateAvailable();
-    void onPingError();
-};
diff --git a/es-app/src/services/HttpServerThread.cpp b/es-app/src/services/HttpServerThread.cpp
index e43b8aa1..d5c08076 100644
--- a/es-app/src/services/HttpServerThread.cpp
+++ b/es-app/src/services/HttpServerThread.cpp
@@ -22,7 +22,6 @@
 
 #include "ThreadedHasher.h"
 #include "scrapers/ThreadedScraper.h"
-#include "guis/GuiUpdate.h"
 
 /* 
 
@@ -280,8 +279,7 @@ void HttpServerThread::run()
 		bool idle = 
 			HttpApi::getRunnningGameInfo().empty() && 
 			!ThreadedScraper::isRunning() && 
-			!ThreadedHasher::isRunning() && 
-			GuiUpdate::state != GuiUpdateState::UPDATER_RUNNING;
+			!ThreadedHasher::isRunning();
 
 		if (idle)
 		{
-- 
2.39.1

